package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strconv"
	"sync"
)

// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î binary ‡∏ï‡∏≤‡∏° OS (Linux ‡πÑ‡∏°‡πà‡∏°‡∏µ .exe)
func targetBinaryName() string {
	name := "main333111"
	if runtime.GOOS == "windows" {
		name += ".exe"
	}
	return name
}

// ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ MAX_PROCS ‡∏à‡∏≤‡∏Å ENV (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 32)
func maxParallel() int {
	if v := os.Getenv("MAX_PROCS"); v != "" {
		if n, err := strconv.Atoi(v); err == nil && n > 0 {
			return n
		}
	}
	return 32 // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á/Colab ‡πÑ‡∏î‡πâ
}

func main() {
	total := 400
	bin := targetBinaryName()

	// ‚úÖ ‡∏´‡∏≤ path ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á runner ‡πÅ‡∏•‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á binary ‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
	self, err := os.Executable()
	if err != nil {
		fmt.Println("‚ùå cannot resolve runner executable path:", err)
		return
	}
	baseDir := filepath.Dir(self)
	exePath := filepath.Join(baseDir, bin)

	// ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
	if st, err := os.Stat(exePath); err != nil || st.IsDir() {
		fmt.Printf("‚ùå target binary not found: %s (build ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linux ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô)\n", exePath)
		return
	}

	fmt.Printf("‚ö° STARTING %d PROCESSES (parallel=%d)\n", total, maxParallel())

	// ‚úÖ semaphore ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
	sem := make(chan struct{}, maxParallel())
	var wg sync.WaitGroup

	for i := 1; i <= total; i++ {
		dbFolder := fmt.Sprintf("acc%03d", i)
		wg.Add(1)

		sem <- struct{}{} // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
		go func(db string) {
			defer wg.Done()
			defer func() { <-sem }() // ‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏¥‡∏ß

			runProcess(exePath, db)
		}(dbFolder)
	}

	wg.Wait()
	fmt.Println("‚úÖ All processes finished.")
}

func runProcess(exePath, dbFolder string) {
	fmt.Printf("üü¢ Spawning process for %-8s ‚Üí %s\n", dbFolder, filepath.Base(exePath))

	cmd := exec.Command(exePath)
	// ‚úÖ ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ ENV ‡πÄ‡∏î‡∏¥‡∏° + ‡∏ï‡∏±‡πâ‡∏á DBFOLDER ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™
	cmd.Env = append(os.Environ(), "DBFOLDER="+dbFolder)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Start(); err != nil {
		fmt.Printf("‚ùå [%-8s] failed to start: %v\n", dbFolder, err)
		return
	}
	if err := cmd.Wait(); err != nil {
		fmt.Printf("‚ö†Ô∏è  [%-8s] exited with error: %v\n", dbFolder, err)
	} else {
		fmt.Printf("‚úÖ [%-8s] completed\n", dbFolder)
	}
}
